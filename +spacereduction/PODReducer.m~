classdef PODReducer < spacereduction.BaseSpaceReducer
    %PODREDUCER Uses POD for reduced space generation.
    %
    % @DanielWirtz, 11.03.2010
    
    properties
        % The modus used to generate the reduced space.
        %
        % Possible choices are:
        % 'sign': All eigenvectors with evalues larger than 'value' percent of the
        %         largest eigenvalue are used. Use 0 for all.
        % 'eps':  All eigenvectors with evalues larger than 'value' are used.
        % 'rel' : Reduction to 'value' percent of the original space dimension.
        % 'abs' : Explicitly specified reduced space dimension. Uses the first
        %         'value' eigenvectors as space.
        %
        % Defaults to 'sign'
        %
        % See also: Value
        Mode = 'sign';
        
        % The value associated with the selected Mode
        %
        % Defaults to .3
        %
        % See also: Mode
        Value = .3;
    end
    
    methods
        function V = generateReducedSpace(this, model)
            % Implements the abstract method from BaseSpaceReducer
            
            %% Preparation
            % Collapse parameter samples and input dimension.
            % Transpose so that the columns are dimensions and rows measures
            data = model.Data.PlainSnapshotArray;
            
            % Subtract means
            %data = data - repmat(mean(data),size(data,1));
            % Compute covariance matrix
            %Cov = (1/size(data,2)) * (data' * data);
            %Cov = cov(data);
            
            
            useeig = false;
            %% Dimension checks
            % This is for the "explicit" modes where the target dimension
            % is either a fixed value or a fraction of the full dimension.
            if strcmpi(this.Mode,'rel')
                target_dim = ceil(size(data,2)*this.Value);
            elseif strcmpi(this.Mode,'abs')
                target_dim = this.Value;
            end
            if target_dim >= size(data,1)
                % Yell boo if no reduction achieved!
                error('Reduced space dimension (%d) has to be smaller than the full state space dimension (%d)!',target_dim,size(data,2));
            end
            %% Actual computation
            if any(strcmpi(this.Mode,{'sign','eps'}))
                [u,s,v] = svd(data,'econ');
                % compute full eigenvalues for sign/eps mode or if other modes result
                % in full space, too. (efficiency)
%                 [ev,ew] = eig(Cov);
                % Invert
%                 ev = flipdim(ev,2);
%                 ew = flipdim(diag(ew),1);
            else
                % For cases 'abs' or 'rel': fixed target dimension.
                [u,s,v] = svds(data, target_dim);
                % Determined number of dimensions; directly get only some
                % Forward verbose setting to eigs fcn
%                 opts.disp = model.Verbose;
%                 [ev, ew] = eigs(Cov,target_dim,'lm',opts);
%                 ew = diag(ew);
            end
            %% Reduction for modes 'sign' and 'eps'
            if strcmpi(this.Mode,'sign')
                sig = s >= s(1)*this.Value;
                % Reduce
                ev = ev(:,sig);
                ew = ew(sig);
            elseif strcmpi(this.Mode,'eps')
                sig = ew >= this.Value;
                % Reduce
                ev = ev(:,sig);
                ew = ew(sig);
            end
            
            % Compute projection matrix
            V = ev;
            %V = sn * ev * diag(ew.^(-0.5));
            %V = V';
        end
        
        function set.Mode(this, value)
            if ~any(strcmpi(value, {'sign','eps','abs','rel'}))
                error(['Unknown POD reduction mode: ''' value '''\nAllowed: sign, eps, abs, rel']);
            end
            this.Mode = lower(value);
        end
    end
    
    methods(Static)
        
        function test_POD
            
            model = models.BaseFullModel;
            model.Data.Snapshots = rand(25,25,10,3);
            
            pod = spacereduction.PODReducer;
            
            pod.Mode = 'eps';
            pod.Value = 1e-2;
            fprintf('eps..');
            pod.generateReducedSpace(model);
            
            pod.Mode = 'sign';
            pod.Value = .3;
            fprintf('sign..');
            pod.generateReducedSpace(model);
            
            pod.Mode = 'rel';
            pod.Value = .3;
            fprintf('rel..');
            pod.generateReducedSpace(model);
            
            pod.Mode = 'abs';
            pod.Value = 10;
            fprintf('abs..');
            pod.generateReducedSpace(model);
        end
    end
    
end

