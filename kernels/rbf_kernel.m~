function K = rbf_kernel( X,Y,gamma )
%RBF_KERNEL Summary of this function goes here
%   Detailed explanation goes here

        n1sq = sum(X.^2);
        n1 = size(X,2);

        if isempty(Y);
          Dsq = (ones(n1,1)*n1sq)' + ones(n1,1)*n1sq - 2*(X'*X);
        else
          n2sq = sum(Y.^2);
          n2 = size(Y,2);
          a = (ones(n2,1)*n1sq)';
          b = ones(n1,1)*n2sq;
          c = 2*(X'*Y);
          Dsq = a + b - c;
        end;
        
        Dsq(Dsq<0) = 0;
        
        K = exp(-gamma*Dsq);
        
        function Dsq = EDsq_matrix(samples1,samples2,params_dummy)
            %function Dsq = EDsq_matrix(samples1,samples2,params)
            %
            % function computing the squared euclidean distance matrix between
            % all columns of samples1, samples2.
            % If samples2 is empty, samples2==samples1 is assumed
            %
            % symmetry is not applied, this could be used for speedup.
            %
            % required fields of params: 
            %    none
            %
            % Dsq(i1,i2) is the squared Euclidean distance between
            %    samples1(:,i1) and samples2(:,i2)

            % Bernard Haasdonk 22.7.2004

            n1sq = sum(samples1.^2);
            n1 = size(samples1,2);

            if isempty(samples2);
              Dsq = (ones(n1,1)*n1sq)' + ones(n1,1)*n1sq -2*(samples1'*samples1);
            else
              n2sq = sum(samples2.^2);
              n2 = size(samples2,2);
              Dsq = (ones(n2,1)*n1sq)' + ones(n1,1)*n2sq -2*samples1'*samples2;
            end;
            z = find(Dsq<0);
            Dsq(z) = 0;
end