classdef PlotManager < handle
% PlotManager: Small class that allows the same plots generated by some
% script to be either organized as subplots or single figures.
%
% This class needs a working 'export_fig' tool that is available at
% http://www.mathworks.com/matlabcentral/fileexchange/23629
%
% Any openend figure using nextPlot can be exported to a directory using a
% specified format (any allowed by export_fig).
%
% Examples:
% % Run with subplots:
% pm = PlotManager(false,2,1);
% pm.FilePrefix = 'my_pm';
% % [.. your plot function called with argument pm ..]
% pm.nextPlot('fig_in_subplot1');
% plot(1:10,sin(1:10));
% pm.nextPlot('fig_in_subplot2');
% plot(-10:10,cos(pi*(-10:10)));
% pm.nextPlot('fig_in_new_subplot1');
% plot(-10:10,exp((-10:10) / 5));
% pm.done;
% pm.savePlots('.','fig');
% pm.savePlots('.','png',true);
%
% % Run with single figures:
% % Run with subplots:
% pm = PlotManager;
% pm.FilePrefix = 'my_pm_single';
% % [.. your plot function called with argument pm ..]
% pm.nextPlot('fig_in_subplot1');
% plot(1:10,sin(1:10));
% pm.nextPlot('fig_in_subplot2');
% plot(-10:10,cos(pi*(-10:10)));
% pm.nextPlot('fig_in_new_subplot1');
% plot(-10:10,exp((-10:10) / 5));
% pm.done;
% pm.savePlots('.','fig');
% pm.savePlots('.','png',true);
%
% @new{0,6,dw,2012-04-12} Added this class.
%
% @author Daniel Wirtz @date 2012-04-12
%
% Copyright (c) 2012, Daniel Wirtz
% All rights reserved.
%
% Redistribution and use in source and binary forms, with or without modification, are
% permitted only in compliance with the BSD license, see
% http://www.opensource.org/licenses/bsd-license.php
    
    properties
        % Flag if single plots shall be used for subsequent calls to
        % nextPlot.
        %
        % @type logical @default true
        Single = true;
        
        % The figure size for each newly created figure when on single
        % mode.
        %
        % Is a two dimensional row vector with width and height
        %
        % @type rowvec<double> @default [600 480]
        SingleSize = [600 480];
        
        % A prefix that has to be put before each file name for exported
        % plots.
        %
        % @type char @default ''
        FilePrefix = '';
        
        % DPI used for export. See export_fig settings.
        %
        % @type char @default '150'
        ExportDPI = '150';
        
        % JPEG quality used for export. See export_fig settings.
        %
        % @type char @default '95'
        JPEGQuality = '95';
    end
    
    properties(Access=private)
        rows = 0;
        cols = 0;
    end
    
    properties(SetAccess=private, Transient)
        % Provides access to all handles (axes or figures) created using
        % nextPlot.
        %
        % @type rowvec<double>
        Figures;
    end
    
    properties(Access=private, Transient)
        h;
        cnt;
        ss;
    end
    
    methods
        function this = PlotManager(single, rows, cols)
            % Creates a new PlotManager
            %
            % Parameters:
            % single: If to create single figures for each call to
            % nextPlot. @type logical @default true
            % rows: If on non-single mode, the number of rows to pass to
            % subplot. @type integer
            % cols: If on non-single mode, the number of columns to pass to
            % subplot. @type integer
            if nargin > 0
                this.Single = single;
                if nargin > 1
                    this.rows = rows;
                    this.cols = cols;    
                end
            end
            this.cnt = 0;
            this.Figures = [];
            s = get(0,'ScreenSize');
            this.ss = s(3:4);
        end
        
        function h = nextPlot(this, tag)
            % Creates a new axis to plot in. Depending on the property
            % tools.PlotMananger.Single this will either advance to the
            % next subplot or open up a new figure window of size
            % SingleSize in the center of the main screen.
            %
            % If you specify a tag it will be used upon exporting created
            % plots to the file system as filename of the plot.
            %
            % Parameters:
            % tag: The tag to use for the axes. @type char @default ''
            %
            % Return values:
            % h: The handle to the new axes object. @type axes
            if nargin == 1
                tag = '';
            end
            this.finishCurrent;
            if this.Single
                this.Figures(end+1) = figure('Position',[(this.ss - this.SingleSize)/2 this.SingleSize],'Tag',tag);
                h = gca;
            else
                this.cnt = this.cnt + 1;
                if isempty(this.Figures) || this.cnt > this.rows*this.cols
                    this.Figures(end+1) = figure('Tag',tag);
                    this.cnt = 1;
                else
                    if gcf ~= this.Figures(end)
                        figure(this.h);
                    end
                end
                h = subplot(this.rows, this.cols, this.cnt, 'Tag', tag);
            end
        end
        
        function done(this)
            % Finishes the current plotting process.
            %
            % Important to call afterwards as the last plot might not get
            % finished off (currently, only "axis tight" is invoked
            % automatically)
            this.finishCurrent;
            this.cnt = 0;
        end
        
        function savePlots(this, folder, format, close)
            % Saves all plots that have been created thus far to a given
            % folder with given format.
            %
            % Parameters:
            if nargin < 4
                close = false;
                if nargin < 3
                    format = 'fig';
                    if nargin < 2
                        folder = pwd;
                    end
                end
            end
            n = length(this.Figures);
            fprintf('Saving %d current figures as "%s"...', n, format);
            for idx=1:n
                h = this.Figures(idx);%#ok<*PROP>
                if ishandle(h)
                    fname = get(h,'Tag');
                    % check for empty tags here as people may have changed
                    % the tag some place else in between
                    if isempty(fname)
                        fname = sprintf('figure_%d',idx);
                    end
                    fname = fullfile(folder, [this.FilePrefix '_' fname]);
                    this.saveFigure(h, fname, format);
                end
            end
            fprintf('done!\n');
            if close
                this.closeAll;
            end
        end
        
        function closeAll(this)
            % Closes all currently openend plots and resets the Handles
            % property.
            for i=1:length(this.Figures)
                h = this.Figures(i);
                if ishandle(h) && strcmp(get(h,'Type'),'figure')
                    close(h);
                end
                if ~isempty(this.h) && ishandle(this.h)
                    close(this.h);
                end
            end
            this.Figures = [];
            this.cnt = 0;
        end
    end
    
    methods(Access=private)
        function finishCurrent(this)
            if ~isempty(this.Figures)
                ax = this.Figures(end);
                if ishandle(ax)
                    % If not an axes, must be a figure
                    if ~strcmp(get(ax,'Type'),'axes')
                        ax = gca(ax);
                    end
                    axis(ax,'tight');
                else
                    this.Figures(end) = [];
                end
            end
        end
        
        function saveFigure(this, fig, filename, ext)
            % Opens a matlab save dialog and saves the given figure to the
            % file selected.
            %
            % Supported formats: eps, jpg, fig, png, tif, pdf
            %
            % @change{0,4,dw,2011-05-31} Improved the export capabilites and automatic removement of
            % any figure margins is performed.
                        
            exts = {'fig','pdf','eps','jpg','png','tif'};
            %%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
            extidx = find(strcmp(ext,exts),1);
            if isempty(extidx)
                warning('KerMor:Utils:invalidExtension','Invalid extension: %s, using eps',ext);
                extidx = 1;
            end
            file = [filename '.' exts{extidx}];
            
            if ~isempty(file)
                d = fileparts(file);
                if ~isempty(d) && exist(d,'file') ~= 7
                    mkdir(d);
                end
                if extidx == 1 % fig
                    saveas(fig, file, 'fig');
                else
                    args = {file, ['-' exts{extidx}],['-r' this.ExportDPI]};
                    if any(extidx == [2 3]) %pdf, eps
                        %args{end+1} = '-painters';
                        args{end+1} = '-transparent';
                    elseif extidx == 4 % jpg
                        args{end+1} = ['-q' this.JPEGQuality];
                        %args{end+1} = '-opengl';
                    elseif extidx == 5 % png
                        args{end+1} = '-transparent';
                    end

                    args{end+1} = fig;

                    % export_fig ignores -transparent somehow on my machine..
                    c = get(fig,'Color');
                    set(fig,'Color','white');

                    export_fig(args{:});

                    set(fig,'Color',c);
                end
            else
                fprintf(2,'No file specified. Aborting\n');
            end
        end
    end
    
end