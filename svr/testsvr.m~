function testsvr
%TESTSVR Summary of this function goes here
%   Detailed explanation goes here

x = -2:.1:5;
fx = sinc(x);

figure(1);
eps = .;
plot(x,fx,'r',x,[fx-eps; fx+eps],'r--');



% Lin. Kernel
kernel = @(X,Y)X'*Y;
% Quad. Kernel
%kernel = @(X,Y)X'*Y.^2;
% Komb. Kernel
%kernel = @(X,Y)X'*Y + X'*Y.^2 + X'*Y.^3;
% Gauss
%kernel = @(X,Y)exp(-.5 * X'*Y);
%kernel = @(X,Y)gaussk(X,Y,.5);

[xi,ai,b,svidx] = scalar_svr(x,fx,kernel,eps,1);

svfun = @(x)ai'*kernel(xi,x) + b;

fsvr = svfun(x);

hold on;

% Plot approximated function
plot(x,fsvr,'b',x,[fsvr-eps; fsvr+eps],'b--');
skipped = setdiff(1:length(x),svidx);
plot(xi,fx(svidx),'.r',x(skipped),fx(skipped),'xr');

hold off;

    function matrix = gaussk(X,Y,gamma)
        n1sq = sum(X.^2);
        n1 = size(X,2);

        if isempty(Y);
          Dsq = (ones(n1,1)*n1sq)' + ones(n1,1)*n1sq - 2*(X'*X);
        else
          n2sq = sum(Y.^2);
          n2 = size(Y,2);
          a = (ones(n2,n1)*n1sq)';
          b = ones(n1,n2)*n2sq;
          c = 2*(X'*Y);
          Dsq = a + b - c;
        end;
        Dsq(Dsq<0) = 0;
        matrix = exp(-gamma*Dsq);
    end

end

