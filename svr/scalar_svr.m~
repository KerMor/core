function [xi,ai,b,svidx] = scalar_svr(xi,fxi,kernelfun,eps,C)
%SCALAR_SVR Summary of this function goes here
%   Detailed explanation goes here

if nargin < 5
    C = 1;
end

% Compile quadratic program
% Total number of samples
m = size(xi,2);
% Ensure fxi is a column vector
fxi = reshape(fxi,m,[]);

% Storage: alpha(1..m) = alpha_i, alpha(m+1..2m) = alpha_i*
% T performs alpha_i* - alpha_i each
T = [-diag(ones(1,m)) diag(ones(1,m))];

Kmat = kernelfun(xi,xi);

%% Problem setup
prog.H = T'*Kmat*T;
prog.f = eps*ones(2*m,1) - T'*fxi;

prog.Aeq = [ones(1,m) -ones(1,m)];
prog.beq = 0;

prog.lb = zeros(2*m,1);
prog.ub = ones(2*m,1)*(C/m);

prog.Aineq = [];
prog.bineq = [];
%prog.x0 = rand(2*m,1)*(C/m);

prog.solver = 'quadprog';
prog.options = optimset('LargeScale','off','MaxIter',300,'Display','off');

%% Solve quadratic problem
ai = quadprog(prog);

%% Extract support vectors
% reduce ai from 2m to m vector
% follow alpha_i* - alpha_i
ai = T*ai;

% Find support vectors
svidx = find(abs(ai) >= 1e-10);

if isempty(svidx)
    error('No support vectors found. Problem unsolvable with current config?');
end
% Reduce set to support vectors


% check if b can be computed correctly
if all(abs(ai(svidx)) - C/m < 1e-10)
    warning('KerMor:svr:Ambiguous_offset',['All coefficients for SVR expansion are bounded.\n'...
        'The offset b cannot be computed correctly, setting b=0.']);
    b = 0;
    
    % Save to-leave-out vectors
    skipped = setdiff(1:m,svidx);
    xskip = xi(skipped);
    fxiskip = fxi(skipped)';
    
    ai = ai(svidx);
    xi = xi(:,svidx);
    return;
    
    diff = Inf;
    while diff > 1e-5
        svrfun = @(x) ai'*kernelfun(xi,x) + b;
        fsvrskip = svrfun(xskip);
        % fsvr-fx + eps
        diffplus = fxiskip - (fsvrskip+eps - fxiskip;
        [val1,idx1] = max(abs(diffplus));
        % fsvr - fx - eps
        diffminus = fsvrskip-eps - fxiskip;
        [val2,idx2] = max(abs(diffminus));
        b = b + (diffminus(idx2)-diffplus(idx1)) / 2;
        diff = max(abs(diffplus(idx1)),abs(diffminus(idx2)));
    end
    
else
    ai = ai(svidx);
    xi = xi(:,svidx);
    Kmat = Kmat(svidx,svidx);
    % Compute b
    [val,idx] = min(abs(abs(ai)-C/(2*m)));
    index = svidx(idx(1));
    b = fxi(index) - ai' * Kmat(:,idx(1)) + sign(m-index)*eps;
end

end

