function s = testsettings
%TESTSETTINGS Summary of this function goes here
%   Detailed explanation goes here

% Frame settings
% What dimension?
testdim = 5;
% How many params? (to use from the ones defined below)
testparams = 3;

s = struct;

%% Test sizes
s.testdim = testdim;
s.testparams = testparams;
s.testinputs = 2;

%% Model settings
s.

%% Dynamical System settings/functions

s.inputs{1} = @(t)1; % Function 1: Constant 1
s.inputs{2} = @(t)sin(4*t); % Function 2: some sin(t)

% Used Parameter Space
s.params(1) = struct('Name', 'P1', 'MinVal', -1, 'MaxVal', 1, 'Desired', 10);
s.params(2) = struct('Name', 'P2', 'MinVal', 2, 'MaxVal', 3, 'Desired', 5);
s.params(3) = struct('Name', 'P3', 'MinVal', 0, 'MaxVal', 10, 'Desired', 6);

% Input conversion
s.B = @(t,mu)ones(testdim,1);
s.B_p = @(t,mu)ones(testdim,1).*mu(randi(testparams,testdim,1));

% Initials

s.x0 = @(mu)rand(testdim,1);
s.x0_p = @(mu)rand(testdim,1)+(rand(testdim,1)<.5).*mu(randi(testparams,testdim,1));

% Linear functions
A = rand(testdim,testdim);
s.flin = @(x,t,mu)A*x;
s.flin_p = @(x,t,mu)(A + diag(mu(randi(testparams,testdim,1))))*x;

% Nonlinear functions
s.fnlin_p = @(x,t,mu)(.5+t)*sin(x) + x(randi(testdim))*mu(randi(testparams));
s.fnlin = @(x,t,mu)(.5+t)*sin(x);

end

