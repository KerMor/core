function model_data = reduce_pod(model_data, podsettings )
%REDUCE_POD Summary of this function goes here
%   Detailed explanation goes here

% Collapse parameter samples and input dimension
sn = model_data.snapshots(:,:);

A = sn'*sn;

if strcmpi(podsettings.mode,'rel')    
    target_dim = round(size(sn,1)*podsettings.value);
    if target_dim > size(A,2)
        warning('KerMor:POD:mode_rel','Reduced space cant be bigger (%d) than sample size (%d). Using sample size.',target_dim,size(A,2));
        target_dim = size(A,2);
    end
elseif strcmpi(podsettings.mode,'abs')
    if podsettings.value > size(A,2)
        warning('KerMor:POD:mode_abs','''model.reduction.POD.value'' cant be bigger (%d) than sample size (%d). Setting to sample size.',podsettings.value,size(A,2));
        podsettings.value = size(A,2);
    end
    target_dim = podsettings.value;
end
if any(strcmpi(podsettings.mode,{'sign','eps'}))
    
else
    
end

switch lower(podsettings.mode)
    % Significance choice: Only use eigenvectors whose eigenvalues are
    % greater than 'value' percent of the largest eigenvalue
    case 'sign'
        [ev,ew] = eig(A);
        % Invert
        ev = flipdim(ev,2); 
        ew = flipdim(diag(ew),1);
        sig = ew >= ew(1)*podsettings.value;
        % Reduce
        ev = ev(:,sig);
        ew = ew(sig);
    % Use evectors with evalues larger than 'value'
    case 'eps'
        [ev,ew] = eig(A);
        % Invert
        ev = flipdim(ev,2); 
        ew = flipdim(diag(ew),1);
        sig = ew >= podsettings.value;
        % Reduce
        ev = ev(:,sig);
        ew = ew(sig);
    % Reduce dimensions to 'value' percent
    case 'rel'
        % Model dimension is first dimension of snapshots
        reddim = round(size(sn,1)*podsettings.value);
        if reddim > size(A,2)
            warning('KerMor:POD:mode_rel','Reduced space cant be bigger (%d) than sample size (%d). Setting to sample size.',reddim,size(A,2));
            reddim = size(A,2);
        end
        % generate descending list of eigenvectors/values:
        [ev, ew] = eigs(A,reddim);
        ew = diag(ew);
    % Explicit target dimension
    case 'abs'
        if podsettings.value > size(A,2)
            warning('KerMor:POD:mode_abs','''model.reduction.POD.value'' cant be bigger (%d) than sample size (%d). Setting to sample size.',podsettings.value,size(A,2));
            podsettings.value = size(A,2);
        end
        [ev, ew] = eigs(A,podsettings.value);
        ew = diag(ew);
    otherwise
        error(['unknown POD reduction mode: ''' podsettings.mode '''']);
end

% Compute projection matrix
model_data.V = sn * ev * diag(ew.^(-0.5));

end

